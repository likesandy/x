(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]||[]).push([["ff80d26d"],{"3f60fd3f":function(e,n,s){"use strict";s.d(n,"__esModule",{value:!0}),s.d(n,"texts",{enumerable:!0,get:function(){return a;}}),s("7a1831ac");let a=[{value:"This guide will explain how to integrate OpenAI's model service into an application built using Ant Design X.",paraId:0},{value:"This is equivalent to integrating with a model inference service compatible with OpenAI. For reference, see ",paraId:1,tocIndex:0},{value:"Model Integration - Qwen",paraId:2,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"Typically, ",paraId:3,tocIndex:1},{value:"openai-node",paraId:3,tocIndex:1},{value:" is used in a Node environment. If used in a browser environment, the ",paraId:3,tocIndex:1},{value:"dangerouslyAllowBrowser",paraId:3,tocIndex:1},{value:" option must be enabled.",paraId:3,tocIndex:1},{value:"Note: ",paraId:4,tocIndex:1},{value:"dangerouslyAllowBrowser",paraId:4,tocIndex:1},{value:" poses a security risk. For more details, refer to the official ",paraId:4,tocIndex:1},{value:"documentation",paraId:4,tocIndex:1},{value:".",paraId:4,tocIndex:1},{value:"import { useXAgent, useXChat, Sender, Bubble } from '@ant-design/x';\nimport OpenAI from 'openai';\nimport React from 'react';\n\nconst client = new OpenAI({\n  apiKey: process.env['OPENAI_API_KEY'],\n  dangerouslyAllowBrowser: true,\n});\n\nconst Demo: React.FC = () => {\n  const [agent] = useXAgent({\n    request: async (info, callbacks) => {\n      const { messages, message } = info;\n\n      const { onSuccess, onUpdate, onError } = callbacks;\n\n      // current message\n      console.log('message', message);\n\n      // history messages\n      console.log('messages', messages);\n\n      let content: string = '';\n\n      try {\n        const stream = await client.chat.completions.create({\n          model: 'gpt-4o',\n          // if chat context is needed, modify the array\n          messages: [{ role: 'user', content: message }],\n          // stream mode\n          stream: true,\n        });\n\n        for await (const chunk of stream) {\n          content += chunk.choices[0]?.delta?.content || '';\n\n          onUpdate(content);\n        }\n\n        onSuccess(content);\n      } catch (error) {\n        // handle error\n        // onError();\n      }\n    },\n  });\n\n  const {\n    // use to send message\n    onRequest,\n    // use to render messages\n    messages,\n  } = useXChat({ agent });\n\n  const items = messages.map(({ message, id }) => ({\n    // key is required, used to identify the message\n    key: id,\n    content: message,\n  }));\n\n  return (\n    <div>\n      <Bubble.List items={items} />\n      <Sender onSubmit={onRequest} />\n    </div>\n  );\n};\n\nexport default Demo;\n",paraId:5,tocIndex:1}];},ff80d26d:function(e,n,s){"use strict";s.d(n,"__esModule",{value:!0}),s.d(n,"default",{enumerable:!0,get:function(){return u;}});var a=s("777fffbe"),t=s("8090cfc0"),o=a._(s("33c468da")),r=a._(s("ddea4080")),i=a._(s("b710171f")),d=s("3e6b097d"),l=s("3a2876c3"),c=s("3f60fd3f"),u=function(){return(0,t.jsx)(l.DumiPage,{children:(0,t.jsx)(d.Suspense,{fallback:(0,t.jsx)(i.default,{}),children:(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:"markdown",children:[(0,t.jsx)("p",{children:c.texts[0].value}),(0,t.jsxs)("h2",{id:"using-openai-api",children:[(0,t.jsx)(r.default,{"aria-hidden":"true",tabIndex:"-1",href:"#using-openai-api",sourceType:"a",children:(0,t.jsx)("span",{className:"icon icon-link"})}),"Using OpenAI API"]}),(0,t.jsxs)("p",{children:[c.texts[1].value,(0,t.jsx)(r.default,{to:"/docs/react/model-use-qwen",sourceType:"Link",children:c.texts[2].value}),c.texts[3].value]}),(0,t.jsxs)("h2",{id:"using-openai-node",children:[(0,t.jsx)(r.default,{"aria-hidden":"true",tabIndex:"-1",href:"#using-openai-node",sourceType:"a",children:(0,t.jsx)("span",{className:"icon icon-link"})}),"Using openai-node"]}),(0,t.jsxs)("p",{children:[c.texts[4].value,(0,t.jsx)("code",{children:c.texts[5].value}),c.texts[6].value,(0,t.jsx)("code",{children:c.texts[7].value}),c.texts[8].value]}),(0,t.jsx)("blockquote",{children:(0,t.jsxs)("p",{children:[c.texts[9].value,(0,t.jsx)("code",{children:c.texts[10].value}),c.texts[11].value,(0,t.jsx)(r.default,{href:"https://github.com/openai/openai-node?tab=readme-ov-file#requirements",sourceType:"a",children:c.texts[12].value}),c.texts[13].value]})}),(0,t.jsx)(o.default,{lang:"tsx",children:c.texts[14].value})]})})})});};}}]);
//# sourceMappingURL=ff80d26d-async.8cc6c743.js.map