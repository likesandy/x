(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]||[]).push([["01afdeb0"],{"01afdeb0":function(e,n,s){"use strict";s.d(n,"__esModule",{value:!0}),s.d(n,"default",{enumerable:!0,get:function(){return u;}});var a=s("777fffbe"),t=s("8090cfc0"),o=a._(s("33c468da")),r=a._(s("ddea4080")),d=a._(s("b710171f")),l=s("3e6b097d"),c=s("3a2876c3"),i=s("87717516"),u=function(){return(0,t.jsx)(c.DumiPage,{children:(0,t.jsx)(l.Suspense,{fallback:(0,t.jsx)(d.default,{}),children:(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{className:"markdown",children:[(0,t.jsx)("p",{children:i.texts[0].value}),(0,t.jsxs)("h2",{id:"\u4F7F\u7528-openai-api",children:[(0,t.jsx)(r.default,{"aria-hidden":"true",tabIndex:"-1",href:"#\u4F7F\u7528-openai-api",sourceType:"a",children:(0,t.jsx)("span",{className:"icon icon-link"})}),"\u4F7F\u7528 OpenAI API"]}),(0,t.jsxs)("p",{children:[i.texts[1].value,(0,t.jsx)(r.default,{to:"/docs/react/model-use-qwen-cn",sourceType:"Link",children:i.texts[2].value})]}),(0,t.jsxs)("h2",{id:"\u4F7F\u7528-openai-node",children:[(0,t.jsx)(r.default,{"aria-hidden":"true",tabIndex:"-1",href:"#\u4F7F\u7528-openai-node",sourceType:"a",children:(0,t.jsx)("span",{className:"icon icon-link"})}),"\u4F7F\u7528 openai-node"]}),(0,t.jsxs)("p",{children:[i.texts[3].value,(0,t.jsx)("code",{children:i.texts[4].value}),i.texts[5].value]}),(0,t.jsx)("blockquote",{children:(0,t.jsxs)("p",{children:[i.texts[6].value,(0,t.jsx)("code",{children:i.texts[7].value}),i.texts[8].value,(0,t.jsx)(r.default,{href:"https://github.com/openai/openai-node?tab=readme-ov-file#requirements",sourceType:"a",children:i.texts[9].value}),i.texts[10].value]})}),(0,t.jsx)(o.default,{lang:"tsx",children:i.texts[11].value})]})})})});};},87717516:function(e,n,s){"use strict";s.d(n,"__esModule",{value:!0}),s.d(n,"texts",{enumerable:!0,get:function(){return a;}}),s("efa6e640");let a=[{value:"\u8FD9\u7BC7\u6307\u5357\u5C06\u4ECB\u7ECD\u5982\u4F55\u5728\u4F7F\u7528 Ant Design X \u642D\u5EFA\u7684\u5E94\u7528\u4E2D\u63A5\u5165 OpenAI \u63D0\u4F9B\u7684\u6A21\u578B\u670D\u52A1\u3002",paraId:0},{value:"\u7B49\u540C\u4E8E\u63A5\u5165\u517C\u5BB9 OpenAI \u7684\u6A21\u578B\u63A8\u7406\u670D\u52A1\uFF0C\u53C2\u8003 ",paraId:1,tocIndex:0},{value:"\u6A21\u578B\u63A5\u5165-\u901A\u4E49\u5343\u95EE",paraId:2,tocIndex:0},{value:"\u901A\u5E38\u60C5\u51B5 openai-node \u7528\u4E8E node \u73AF\u5883\uFF0C\u5982\u679C\u5728\u6D4F\u89C8\u5668\u73AF\u5883\u4F7F\u7528\uFF0C\u9700\u8981\u5F00\u542F ",paraId:3,tocIndex:1},{value:"dangerouslyAllowBrowser",paraId:3,tocIndex:1},{value:"\u3002",paraId:3,tocIndex:1},{value:"\u6CE8\u610F: ",paraId:4,tocIndex:1},{value:"dangerouslyAllowBrowser",paraId:4,tocIndex:1},{value:" \u5B58\u5728\u5B89\u5168\u98CE\u9669\uFF0C\u5BF9\u6B64 openai-node \u7684\u5B98\u65B9\u6587\u6863\u6709\u8BE6\u7EC6\u7684",paraId:4,tocIndex:1},{value:"\u8BF4\u660E",paraId:4,tocIndex:1},{value:"\u3002",paraId:4,tocIndex:1},{value:"import { useXAgent, useXChat, Sender, Bubble } from '@ant-design/x';\nimport OpenAI from 'openai';\nimport React from 'react';\n\nconst client = new OpenAI({\n  apiKey: process.env['OPENAI_API_KEY'],\n  dangerouslyAllowBrowser: true,\n});\n\nconst Demo: React.FC = () => {\n  const [agent] = useXAgent({\n    request: async (info, callbacks) => {\n      const { messages, message } = info;\n\n      const { onSuccess, onUpdate, onError } = callbacks;\n\n      // current message\n      console.log('message', message);\n\n      // history messages\n      console.log('messages', messages);\n\n      let content: string = '';\n\n      try {\n        const stream = await client.chat.completions.create({\n          model: 'gpt-4o',\n          // if chat context is needed, modify the array\n          messages: [{ role: 'user', content: message }],\n          // stream mode\n          stream: true,\n        });\n\n        for await (const chunk of stream) {\n          content += chunk.choices[0]?.delta?.content || '';\n\n          onUpdate(content);\n        }\n\n        onSuccess(content);\n      } catch (error) {\n        // handle error\n        // onError();\n      }\n    },\n  });\n\n  const {\n    // use to send message\n    onRequest,\n    // use to render messages\n    messages,\n  } = useXChat({ agent });\n\n  const items = messages.map(({ message, id }) => ({\n    // key is required, used to identify the message\n    key: id,\n    content: message,\n  }));\n\n  return (\n    <div>\n      <Bubble.List items={items} />\n      <Sender onSubmit={onRequest} />\n    </div>\n  );\n};\n\nexport default Demo;\n",paraId:5,tocIndex:1}];}}]);
//# sourceMappingURL=01afdeb0-async.2504f307.js.map